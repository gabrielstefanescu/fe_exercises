{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class BankAccountService {\n  constructor() {\n    this._bankAccounts = [];\n  }\n  withdrawal(accountIndex, depositAmount) {\n    throw new Error('Method not implemented.');\n  }\n  get bankAccounts() {\n    return this._bankAccounts;\n  }\n  addBankAccount(bankAccounts) {\n    this._bankAccounts.push(bankAccounts);\n  }\n  deposit(accountIndex, amount) {\n    // Implement the deposit logic here, for example:\n    if (accountIndex >= 0 && accountIndex < this._bankAccounts.length) {\n      this._bankAccounts[accountIndex].deposit(amount);\n    } else {\n      // Handle the case when the account doesn't exist\n      console.error('Invalid account index');\n    }\n  }\n  withdrawal(accountIndex, amount) {\n    // Implement the deposit logic here, for example:\n    if (accountIndex >= 0 && accountIndex < this._bankAccounts.length) {\n      this._bankAccounts[accountIndex].withdrawal(amount);\n    } else {\n      // Handle the case when the account doesn't exist\n      console.error('Invalid account index');\n    }\n  }\n  static #_ = this.ɵfac = function BankAccountService_Factory(t) {\n    return new (t || BankAccountService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: BankAccountService,\n    factory: BankAccountService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["BankAccountService","constructor","_bankAccounts","withdrawal","accountIndex","depositAmount","Error","bankAccounts","addBankAccount","push","deposit","amount","length","console","error","_","_2","factory","ɵfac","providedIn"],"sources":["C:\\Exercises\\js-exercises\\src\\app\\bankaccount.component.ts\\bankaccount.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { BankAccount } from '../classes';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class BankAccountService {\r\n  withdrawal(accountIndex: number, depositAmount: number) {\r\n    throw new Error('Method not implemented.');\r\n  }\r\n\r\n  private _bankAccounts: BankAccount[] = [];\r\n  \r\n  get bankAccounts(): BankAccount[] {\r\n    return this._bankAccounts;\r\n  }\r\n  addBankAccount(bankAccounts: BankAccount) {\r\n    this._bankAccounts.push(bankAccounts);\r\n  }\r\n  deposit(accountIndex: number, amount: number) {\r\n    // Implement the deposit logic here, for example:\r\n    if (accountIndex >= 0 && accountIndex < this._bankAccounts.length) {\r\n      this._bankAccounts[accountIndex].deposit(amount);\r\n    } else {\r\n      // Handle the case when the account doesn't exist\r\n      console.error('Invalid account index');\r\n    }\r\n  }\r\n\r\n  withdrawal(accountIndex: number, amount: number) {\r\n    // Implement the deposit logic here, for example:\r\n    if (accountIndex >= 0 && accountIndex < this._bankAccounts.length) {\r\n      this._bankAccounts[accountIndex].withdrawal(amount);\r\n    } else {\r\n      // Handle the case when the account doesn't exist\r\n      console.error('Invalid account index');\r\n    }\r\n  }\r\n\r\n}\r\n  "],"mappings":";AAMA,OAAM,MAAOA,kBAAkB;EAH/BC,YAAA;IAQU,KAAAC,aAAa,GAAkB,EAAE;;EAJzCC,UAAUA,CAACC,YAAoB,EAAEC,aAAqB;IACpD,MAAM,IAAIC,KAAK,CAAC,yBAAyB,CAAC;EAC5C;EAIA,IAAIC,YAAYA,CAAA;IACd,OAAO,IAAI,CAACL,aAAa;EAC3B;EACAM,cAAcA,CAACD,YAAyB;IACtC,IAAI,CAACL,aAAa,CAACO,IAAI,CAACF,YAAY,CAAC;EACvC;EACAG,OAAOA,CAACN,YAAoB,EAAEO,MAAc;IAC1C;IACA,IAAIP,YAAY,IAAI,CAAC,IAAIA,YAAY,GAAG,IAAI,CAACF,aAAa,CAACU,MAAM,EAAE;MACjE,IAAI,CAACV,aAAa,CAACE,YAAY,CAAC,CAACM,OAAO,CAACC,MAAM,CAAC;KACjD,MAAM;MACL;MACAE,OAAO,CAACC,KAAK,CAAC,uBAAuB,CAAC;;EAE1C;EAEAX,UAAUA,CAACC,YAAoB,EAAEO,MAAc;IAC7C;IACA,IAAIP,YAAY,IAAI,CAAC,IAAIA,YAAY,GAAG,IAAI,CAACF,aAAa,CAACU,MAAM,EAAE;MACjE,IAAI,CAACV,aAAa,CAACE,YAAY,CAAC,CAACD,UAAU,CAACQ,MAAM,CAAC;KACpD,MAAM;MACL;MACAE,OAAO,CAACC,KAAK,CAAC,uBAAuB,CAAC;;EAE1C;EAAC,QAAAC,CAAA,G;qBA/BUf,kBAAkB;EAAA;EAAA,QAAAgB,EAAA,G;WAAlBhB,kBAAkB;IAAAiB,OAAA,EAAlBjB,kBAAkB,CAAAkB,IAAA;IAAAC,UAAA,EAFjB;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}