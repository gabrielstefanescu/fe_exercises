{"ast":null,"code":"//   1. Create a Class for Cars:\n// Define a class named Car with properties like make, model, and year.\n// Add a method to the class that displays information about the car.\n// Create instances of the class and demonstrate the use of the class and its methods.\nexport class Car {\n  constructor(make, model, year) {\n    this.make = make;\n    this.model = model;\n    this.year = year;\n  }\n  information() {\n    return `The car is ${this.make}, model ${this.model}, year ${this.year}.`;\n  }\n}\n// export const cars: Car[] = [\n//   new Car('Porsche', '911 Carrera', 2022),\n//   new Car('Ferarri', 'SF90 STRADALE', 2023),\n// ];\n// 2. Inheritance:\n// Create a class Animal with properties and methods.\n//  Then, create a subclass Bird that inherits from Animal and adds specific properties and methods for birds.\n//  Demonstrate the use of inheritance by creating instances of both classes.\nexport class Animal {\n  constructor(species, action, order, food) {\n    this.species = species;\n    this.action = action;\n    this.order = order;\n    this.food = food;\n  }\n  animalInformation() {\n    return `The animal is ${this.species}, it likes to ${this.action}, belongs to order ${this.order} and eats ${this.food}.`;\n  }\n}\n//const animal1 = new Animal('tiger', 'run', 'carnivore', 'meat');\n// export const animals: Animal[] = [\n//   new Animal('tiger', 'run', 'carnivore', 'meat'),\n// ];\nexport class Bird extends Animal {\n  constructor(species, action, order, food, move, coverage) {\n    super(species, action, order, food);\n    this.move = move;\n    this.coverage = coverage;\n  }\n  animalInformationExtended() {\n    return this.animalInformation() + ` It can also ${this.move} and it has ${this.coverage}.`;\n  }\n}\n// export const animal2: Bird[] = [\n//   new Bird('eagle', 'jump', 'carnivore', 'meat', 'fly', 'feathers'),\n// ];\n// 3. Encapsulation:\n// Design a class representing a bank account. Include properties like balance and methods for deposit and withdrawal.\n// Implement encapsulation by making the balance property private and providing public methods for interacting with the balance.\nexport class BankAccount {\n  static withdrawal(arg0) {\n    throw new Error('Method not implemented.');\n  }\n  static deposit(arg0) {\n    throw new Error('Method not implemented.');\n  }\n  #firstName;\n  #lastName;\n  #id;\n  #balance;\n  constructor(firstName, lastName, id, balance) {\n    this.#firstName = firstName;\n    this.#lastName = lastName;\n    this.#id = id;\n    this.#balance = balance;\n  }\n  showBalance() {\n    return `Name: ${this.#firstName} ${this.#lastName}, ID: ${this.#id}. Your current ballance is: ${this.#balance}$.`;\n  }\n  deposit(x) {\n    this.#balance += x;\n    return 'Deposit: ' + x + '';\n    'Current ballance: ' + this.#balance + '$';\n  }\n  withdrawal(y) {\n    if (this.#balance >= y) {\n      this.#balance -= y;\n      return console.log('Current ballance: ' + this.#balance + '$');\n    } else {\n      //console.log('Insufficient balance');\n    }\n  }\n}\n// export const user1 = new BankAccount('John', 'Doe', 123456789, 1000);\n// user1.showBalance();\n// let deposit = user1.deposit(20);\n// console.log(deposit);\n// user1.withdrawal(600);\n// 4. Static Methods:\n// Create a class representing a utility tool. Add static methods to the class that perform common utility functions.\n// Demonstrate calling these static methods without creating an instance of the class.\nexport class UtilityTool {\n  static add(x, y) {\n    return x + y;\n  }\n  static divide(x, y) {\n    return x - y;\n  }\n  static compare(x, y) {\n    return x > y;\n  }\n}\n// let result = UtilityTool.add(10, 20);\n// let result2 = UtilityTool.divide(100, 20);\n// let result3 = UtilityTool.compare(40, 20);\n// console.log(result);\n// console.log(result2);\n// console.log(result3);\n// 5. Prototype Methods:\n// Design a class representing a geometric shape (e.g., a circle or rectangle).\n// Add prototype methods to calculate area and perimeter.\n// Create instances of the class and use these prototype methods to compute and display the area and perimeter.\nclass Rectangle {\n  constructor(sideA, sideB) {\n    this.sideA = sideA;\n    this.sideB = sideB;\n  }\n  area() {\n    //console.log(this.sideA * this.sideB);\n  }\n  perimeter() {\n    // console.log(2 * (this.sideA + this.sideB));\n  }\n}\nlet rectangle1 = new Rectangle(4, 5);\nrectangle1.area();\nrectangle1.perimeter();\nlet rectangle2 = new Rectangle(6, 7);\nrectangle2.area();\nrectangle2.perimeter();","map":{"version":3,"names":["Car","constructor","make","model","year","information","Animal","species","action","order","food","animalInformation","Bird","move","coverage","animalInformationExtended","BankAccount","withdrawal","arg0","Error","deposit","firstName","lastName","id","balance","showBalance","x","y","console","log","UtilityTool","add","divide","compare","Rectangle","sideA","sideB","area","perimeter","rectangle1","rectangle2"],"sources":["C:\\Exercises\\js-exercises\\src\\app\\classes.ts"],"sourcesContent":["//   1. Create a Class for Cars:\r\n// Define a class named Car with properties like make, model, and year.\r\n// Add a method to the class that displays information about the car.\r\n// Create instances of the class and demonstrate the use of the class and its methods.\r\n\r\nexport class Car {\r\n  make: string;\r\n  model: string;\r\n  year: number;\r\n  constructor(make: string, model: string, year: number) {\r\n    this.make = make;\r\n    this.model = model;\r\n    this.year = year;\r\n  }\r\n  information(): string {\r\n    return `The car is ${this.make}, model ${this.model}, year ${this.year}.`;\r\n  }\r\n}\r\n\r\n// export const cars: Car[] = [\r\n//   new Car('Porsche', '911 Carrera', 2022),\r\n//   new Car('Ferarri', 'SF90 STRADALE', 2023),\r\n// ];\r\n// 2. Inheritance:\r\n// Create a class Animal with properties and methods.\r\n//  Then, create a subclass Bird that inherits from Animal and adds specific properties and methods for birds.\r\n//  Demonstrate the use of inheritance by creating instances of both classes.\r\n\r\nexport class Animal {\r\n  species: string;\r\n  action: string;\r\n  order: string;\r\n  food: string;\r\n  constructor(species: string, action: string, order: string, food: string) {\r\n    this.species = species;\r\n    this.action = action;\r\n    this.order = order;\r\n    this.food = food;\r\n  }\r\n  animalInformation(): string {\r\n    return `The animal is ${this.species}, it likes to ${this.action}, belongs to order ${this.order} and eats ${this.food}.`;\r\n  }\r\n}\r\n\r\n//const animal1 = new Animal('tiger', 'run', 'carnivore', 'meat');\r\n// export const animals: Animal[] = [\r\n//   new Animal('tiger', 'run', 'carnivore', 'meat'),\r\n// ];\r\n\r\nexport class Bird extends Animal {\r\n  move: string;\r\n  coverage: string;\r\n  constructor(\r\n    species: string,\r\n    action: string,\r\n    order: string,\r\n    food: string,\r\n    move: string,\r\n    coverage: string\r\n  ) {\r\n    super(species, action, order, food);\r\n    this.move = move;\r\n    this.coverage = coverage;\r\n  }\r\n  animalInformationExtended() {\r\n    return (\r\n      this.animalInformation() +\r\n      ` It can also ${this.move} and it has ${this.coverage}.`\r\n    );\r\n  }\r\n}\r\n\r\n// export const animal2: Bird[] = [\r\n//   new Bird('eagle', 'jump', 'carnivore', 'meat', 'fly', 'feathers'),\r\n// ];\r\n\r\n// 3. Encapsulation:\r\n// Design a class representing a bank account. Include properties like balance and methods for deposit and withdrawal.\r\n// Implement encapsulation by making the balance property private and providing public methods for interacting with the balance.\r\n\r\nexport class BankAccount {\r\n  static withdrawal(arg0: number): BankAccount {\r\n    throw new Error('Method not implemented.');\r\n  }\r\n  static deposit(arg0: number): BankAccount {\r\n    throw new Error('Method not implemented.');\r\n  }\r\n  #firstName;\r\n  #lastName;\r\n  #id;\r\n  #balance;\r\n    addBankAccount: any;\r\n  constructor(\r\n    firstName: string,\r\n    lastName: string,\r\n    id: number,\r\n    balance: number\r\n  ) {\r\n    this.#firstName = firstName;\r\n    this.#lastName = lastName;\r\n    this.#id = id;\r\n    this.#balance = balance;\r\n  }\r\n  showBalance() {\r\n    return `Name: ${this.#firstName} ${this.#lastName}, ID: ${\r\n      this.#id\r\n    }. Your current ballance is: ${this.#balance}$.`;\r\n  }\r\n\r\n  deposit(x: number) {\r\n    this.#balance += x;\r\n    return 'Deposit: ' + x +'' 'Current ballance: ' + this.#balance + '$';\r\n  }\r\n\r\n  withdrawal(y: number) {\r\n    if (this.#balance >= y) {\r\n      this.#balance -= y;\r\n      return console.log('Current ballance: ' + this.#balance + '$');\r\n    } else {\r\n      //console.log('Insufficient balance');\r\n    }\r\n  }\r\n}\r\n\r\n// export const user1 = new BankAccount('John', 'Doe', 123456789, 1000);\r\n// user1.showBalance();\r\n// let deposit = user1.deposit(20);\r\n// console.log(deposit);\r\n// user1.withdrawal(600);\r\n\r\n// 4. Static Methods:\r\n// Create a class representing a utility tool. Add static methods to the class that perform common utility functions.\r\n// Demonstrate calling these static methods without creating an instance of the class.\r\n\r\nexport class UtilityTool {\r\n  static add(x: number, y: number) {\r\n    return x + y;\r\n  }\r\n\r\n  static divide(x: number, y: number) {\r\n    return x - y;\r\n  }\r\n\r\n  static compare(x: number, y: number) {\r\n    return x > y;\r\n  }\r\n}\r\n// let result = UtilityTool.add(10, 20);\r\n// let result2 = UtilityTool.divide(100, 20);\r\n// let result3 = UtilityTool.compare(40, 20);\r\n// console.log(result);\r\n// console.log(result2);\r\n// console.log(result3);\r\n\r\n// 5. Prototype Methods:\r\n// Design a class representing a geometric shape (e.g., a circle or rectangle).\r\n// Add prototype methods to calculate area and perimeter.\r\n// Create instances of the class and use these prototype methods to compute and display the area and perimeter.\r\n\r\nclass Rectangle {\r\n  sideA: number;\r\n  sideB: number;\r\n  constructor(sideA: number, sideB: number) {\r\n    this.sideA = sideA;\r\n    this.sideB = sideB;\r\n  }\r\n  area() {\r\n    //console.log(this.sideA * this.sideB);\r\n  }\r\n  perimeter() {\r\n    // console.log(2 * (this.sideA + this.sideB));\r\n  }\r\n}\r\n\r\nlet rectangle1 = new Rectangle(4, 5);\r\nrectangle1.area();\r\nrectangle1.perimeter();\r\n\r\nlet rectangle2 = new Rectangle(6, 7);\r\nrectangle2.area();\r\nrectangle2.perimeter();\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}