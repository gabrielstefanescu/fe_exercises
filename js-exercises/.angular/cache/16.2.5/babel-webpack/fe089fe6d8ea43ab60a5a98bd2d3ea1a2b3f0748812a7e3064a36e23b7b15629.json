{"ast":null,"code":"// import { Component } from '@angular/core';\n// @Component({\n//   selector: 'app-classes',\n//   templateUrl: './classes.component.html',\n//   styleUrls: ['./classes.component.css']\n// })\n// export class ClassesComponent {\n// }\n//   1. Create a Class for Cars:\n// Define a class named Car with properties like make, model, and year.\n// Add a method to the class that displays information about the car.\n// Create instances of the class and demonstrate the use of the class and its methods.\nexport class Car {\n  constructor(make, model, year) {\n    this.make = make;\n    this.model = model;\n    this.year = year;\n  }\n  Information() {\n    console.log(`The car is ${this.make}, model ${this.model}, year ${this.year}.`);\n  }\n}\nconst car1 = new Car('Porsche', '911 Carrera', 2022);\ncar1.Information();\nconst car2 = new Car('Ferarri', 'SF90 STRADALE', 2023);\ncar2.Information();\n// 2. Inheritance:\n// Create a class Animal with properties and methods.\n//  Then, create a subclass Bird that inherits from Animal and adds specific properties and methods for birds.\n//  Demonstrate the use of inheritance by creating instances of both classes.\nexport class Animal {\n  constructor(species, action, order, food) {\n    this.species = species;\n    this.action = action;\n    this.order = order;\n    this.food = food;\n  }\n  animalInformation() {\n    return `The animal is ${this.species}, it likes to ${this.action}, belongs to order ${this.order} and eats ${this.food}.`;\n  }\n}\nconst animal1 = new Animal('tiger', 'run', 'carnivore', 'meat');\nconsole.log(animal1.animalInformation());\nexport class Bird extends Animal {\n  constructor(species, action, order, food, move, coverage) {\n    super(species, action, order, food);\n    this.move = move;\n    this.coverage = coverage;\n  }\n  animalInformationExtended() {\n    console.log(this.animalInformation() + ` It can also ${this.move} and it has ${this.coverage}.`);\n  }\n}\nconst animal2 = new Bird('eagle', 'jump', 'carnivore', 'meat', 'fly', 'feathers');\nanimal2.animalInformationExtended();\n// 3. Encapsulation:\n// Design a class representing a bank account. Include properties like balance and methods for deposit and withdrawal.\n// Implement encapsulation by making the balance property private and providing public methods for interacting with the balance.\nexport class bankAccount {\n  #firstName;\n  #lastName;\n  #id;\n  #balance;\n  constructor(firstName, lastName, id, balance) {\n    this.#firstName = firstName;\n    this.#lastName = lastName;\n    this.#id = id;\n    this.#balance = balance;\n  }\n  showBalance() {\n    console.log(`Name: ${this.#firstName} ${this.#lastName}, ID: ${this.#id}. Your current ballance is: ${this.#balance}$.`);\n  }\n  deposit(x) {\n    this.#balance += x;\n    return 'Current ballance: ' + this.#balance + '$';\n  }\n  withdrawal(y) {\n    if (this.#balance >= y) {\n      this.#balance -= y;\n      return console.log('Current ballance: ' + this.#balance + '$');\n    } else {\n      console.log('Insufficient balance');\n    }\n  }\n}\nconst user1 = new bankAccount('John', 'Doe', 123456789, 1000);\nuser1.showBalance();\nlet deposit = user1.deposit(20);\nconsole.log(deposit);\nuser1.withdrawal(600);\n// 4. Static Methods:\n// Create a class representing a utility tool. Add static methods to the class that perform common utility functions.\n// Demonstrate calling these static methods without creating an instance of the class.\nexport class utilityTool {\n  static add(x, y) {\n    return x + y;\n  }\n  static divide(x, y) {\n    return x - y;\n  }\n  static compare(x, y) {\n    return x > y;\n  }\n}\nlet result = utilityTool.add(10, 20);\nlet result2 = utilityTool.divide(100, 20);\nlet result3 = utilityTool.compare(40, 20);\nconsole.log(result);\nconsole.log(result2);\nconsole.log(result3);\n// 5. Prototype Methods:\n// Design a class representing a geometric shape (e.g., a circle or rectangle).\n// Add prototype methods to calculate area and perimeter.\n// Create instances of the class and use these prototype methods to compute and display the area and perimeter.\nexport class rectangle {\n  constructor(sideA, sideB) {\n    this.sideA = sideA;\n    this.sideB = sideB;\n  }\n  area() {\n    console.log(this.sideA * this.sideB);\n  }\n  perimeter() {\n    console.log(2 * (this.sideA + this.sideB));\n  }\n}\nlet rectangle1 = new rectangle(4, 5);\nrectangle1.area();\nrectangle1.perimeter();\nlet rectangle2 = new rectangle(6, 7);\nrectangle2.area();\nrectangle2.perimeter();","map":{"version":3,"names":["Car","constructor","make","model","year","Information","console","log","car1","car2","Animal","species","action","order","food","animalInformation","animal1","Bird","move","coverage","animalInformationExtended","animal2","bankAccount","firstName","lastName","id","balance","showBalance","deposit","x","withdrawal","y","user1","utilityTool","add","divide","compare","result","result2","result3","rectangle","sideA","sideB","area","perimeter","rectangle1","rectangle2"],"sources":["C:\\Exercises\\js-exercises\\src\\app\\classes\\classes.component.ts"],"sourcesContent":["// import { Component } from '@angular/core';\n\n// @Component({\n//   selector: 'app-classes',\n//   templateUrl: './classes.component.html',\n//   styleUrls: ['./classes.component.css']\n// })\n// export class ClassesComponent {\n\n// }\n\n\n//   1. Create a Class for Cars:\n// Define a class named Car with properties like make, model, and year.\n// Add a method to the class that displays information about the car.\n// Create instances of the class and demonstrate the use of the class and its methods.\n\nexport class Car {\n  make: string;\n  model: string;\n  year: number;\n  constructor(make: string, model: string, year: number) {\n    this.make = make;\n    this.model = model;\n    this.year = year;\n  }\n  Information() {\n    console.log(\n      `The car is ${this.make}, model ${this.model}, year ${this.year}.`\n    );\n  }\n}\n\nconst car1 = new Car('Porsche', '911 Carrera', 2022);\ncar1.Information();\nconst car2 = new Car('Ferarri', 'SF90 STRADALE', 2023);\ncar2.Information();\n\n// 2. Inheritance:\n// Create a class Animal with properties and methods.\n//  Then, create a subclass Bird that inherits from Animal and adds specific properties and methods for birds.\n//  Demonstrate the use of inheritance by creating instances of both classes.\n\nexport class Animal {\n  species: string;\n  action: string;\n  order: string;\n  food: string;\n  constructor(species: string, action: string, order: string, food: string) {\n    this.species = species;\n    this.action = action;\n    this.order = order;\n    this.food = food;\n  }\n  animalInformation() {\n    return `The animal is ${this.species}, it likes to ${this.action}, belongs to order ${this.order} and eats ${this.food}.`;\n  }\n}\n\nconst animal1 = new Animal('tiger', 'run', 'carnivore', 'meat');\nconsole.log(animal1.animalInformation());\n\nexport class Bird extends Animal {\n  move: string;\n  coverage: string;\n  constructor(\n    species: string,\n    action: string,\n    order: string,\n    food: string,\n    move: string,\n    coverage: string\n  ) {\n    super(species, action, order, food);\n    this.move = move;\n    this.coverage = coverage;\n  }\n  animalInformationExtended() {\n    console.log(\n      this.animalInformation() +\n        ` It can also ${this.move} and it has ${this.coverage}.`\n    );\n  }\n}\n\nconst animal2 = new Bird(\n  'eagle',\n  'jump',\n  'carnivore',\n  'meat',\n  'fly',\n  'feathers'\n);\nanimal2.animalInformationExtended();\n\n// 3. Encapsulation:\n// Design a class representing a bank account. Include properties like balance and methods for deposit and withdrawal.\n// Implement encapsulation by making the balance property private and providing public methods for interacting with the balance.\n\nexport class bankAccount {\n  #firstName;\n  #lastName;\n  #id;\n  #balance;\n  constructor(\n    firstName: string,\n    lastName: string,\n    id: number,\n    balance: number\n  ) {\n    this.#firstName = firstName;\n    this.#lastName = lastName;\n    this.#id = id;\n    this.#balance = balance;\n  }\n  showBalance() {\n    console.log(\n      `Name: ${this.#firstName} ${this.#lastName}, ID: ${\n        this.#id\n      }. Your current ballance is: ${this.#balance}$.`\n    );\n  }\n\n  deposit(x: number) {\n    this.#balance += x;\n    return 'Current ballance: ' + this.#balance + '$';\n  }\n\n  withdrawal(y: number) {\n    if (this.#balance >= y) {\n      this.#balance -= y;\n      return console.log('Current ballance: ' + this.#balance + '$');\n    } else {\n      console.log('Insufficient balance');\n    }\n  }\n}\n\nconst user1 = new bankAccount('John', 'Doe', 123456789, 1000);\nuser1.showBalance();\nlet deposit = user1.deposit(20);\nconsole.log(deposit);\nuser1.withdrawal(600);\n\n// 4. Static Methods:\n// Create a class representing a utility tool. Add static methods to the class that perform common utility functions.\n// Demonstrate calling these static methods without creating an instance of the class.\n\nexport class utilityTool {\n  static add(x: number, y: number) {\n    return x + y;\n  }\n\n  static divide(x: number, y: number) {\n    return x - y;\n  }\n\n  static compare(x: number, y: number) {\n    return x > y;\n  }\n}\nlet result = utilityTool.add(10, 20);\nlet result2 = utilityTool.divide(100, 20);\nlet result3 = utilityTool.compare(40, 20);\nconsole.log(result);\nconsole.log(result2);\nconsole.log(result3);\n\n// 5. Prototype Methods:\n// Design a class representing a geometric shape (e.g., a circle or rectangle).\n// Add prototype methods to calculate area and perimeter.\n// Create instances of the class and use these prototype methods to compute and display the area and perimeter.\n\nexport class rectangle {\n  sideA: number;\n  sideB: number;\n  constructor(sideA: number, sideB: number) {\n    this.sideA = sideA;\n    this.sideB = sideB;\n  }\n  area() {\n    console.log(this.sideA * this.sideB);\n  }\n  perimeter() {\n    console.log(2 * (this.sideA + this.sideB));\n  }\n}\n\nlet rectangle1 = new rectangle(4, 5);\nrectangle1.area();\nrectangle1.perimeter();\n\nlet rectangle2 = new rectangle(6, 7);\nrectangle2.area();\nrectangle2.perimeter();\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}